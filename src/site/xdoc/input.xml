<?xml version="1.0"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

    <properties>
        <title>Different kinds of input</title>
        <author email="rbri@rbri.de">RBRi</author>
    </properties>

    <body>
        <section name="">
            <p>
                CSSParser can work with different kinds of input by setting up an instance
                of class org.w3c.css.sac.InputSource in different ways.
            </p>
        </section>

        <section name="String input">
            <p>
                Working with strings as input is the simplest case because there is no need
                to take care of any encoding.
            </p>
            <source><![CDATA[
InputSource source = new InputSource(new StringReader("h1 { background: #ffcc44; }"));
CSSOMParser parser = new CSSOMParser(new SACParserCSS3());

CSSStyleSheet sheet = parser.parseStyleSheet(source, null, null);
....
]]></source>
            <p>&nbsp;</p>
        </section>

        <section name="Using an InputStreamReader">
            <p>
                When using an InputStreamReader the reader itself is responsible for
                the correct conversion from the bytes (e.g. taken from a file) into characters.
                Therefore you have to provide the correct encoding as second parameter of the
                InputStreamReader constructor.
            </p>
            <source><![CDATA[
InputStream inStream = new FileInputStream("input.css");
try {
    InputSource source = new InputSource(new InputStreamReader(inStream, "UTF-8"));

    CSSOMParser parser = new CSSOMParser(new SACParserCSS3());
    ....
} finally {
    inStream.close();
}
]]></source>
            <p>&nbsp;</p>
        </section>
        <section name="Using an InputStream">
            <p>
                If you like to use an InputStream as parser input, you have to inform
                the InputSource about the correct encoding of your input stream.
            </p>
            <source><![CDATA[
InputStream inStream = new FileInputStream("input.css");
try {
    InputSource source = new InputSource();
    source.setByteStream(inStream);
    source.setEncoding("UTF-8");

    CSSOMParser parser = new CSSOMParser(new SACParserCSS3());
    ....
} finally {
    inStream.close();
}
]]></source>
        </section>
    </body>
</document>
