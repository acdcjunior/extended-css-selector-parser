/*
 * CSS Parser Project
 *
 * Copyright (C) 1999-2011 David Schweinsberg.  All rights reserved.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * To contact the authors of the library:
 *
 * http://cssparser.sourceforge.net/
 * mailto:davidsch@users.sourceforge.net
 *
 */

options {
    IGNORE_CASE = true;
    STATIC = false;
//    UNICODE_INPUT = false;
    USER_CHAR_STREAM = true;
//    DEBUG_TOKEN_MANAGER = true;
//    DEBUG_PARSER = true;
}

PARSER_BEGIN(SACParserCSS21)

package com.steadystate.css.parser;

import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.w3c.css.sac.CSSParseException;
import org.w3c.css.sac.Condition;
import org.w3c.css.sac.ErrorHandler;
import org.w3c.css.sac.LexicalUnit;
import org.w3c.css.sac.Locator;
import org.w3c.css.sac.Parser;
import org.w3c.css.sac.Selector;
import org.w3c.css.sac.SelectorList;
import org.w3c.css.sac.SimpleSelector;


/**
 * @author <a href="mailto:davidsch@users.sourceforge.net">David Schweinsberg</a>
 * @version $Id: SACParserCSS21.jj,v 1.9 2010-05-19 13:26:51 waldbaer Exp $
 */
public class SACParserCSS21 extends AbstractSACParser implements Parser {

    private boolean _quiet = true;

    public SACParserCSS21() {
        this((CharStream) null);
    }

    public String getParserVersion() {
        return "http://www.w3.org/TR/CSS21/";
    }

    protected String getGrammarUri()
    {
        return "http://www.w3.org/TR/CSS21/grammar.html";
    }

    protected Token getToken()
    {
        return this.token;
    }

}

PARSER_END(SACParserCSS21)

TOKEN_MGR_DECLS :
{
    private static final Pattern SPLIT_NUMBER_PATTERN = Pattern.compile("[0-9]+|[0-9]*.[0-9]+");

    private boolean _quiet = true;
    private ErrorHandler errorHandler;

    public String splitNumber(StringBuilder pattern) {
        int j=1;
        Matcher matcher = SPLIT_NUMBER_PATTERN.matcher(pattern.substring(0, j));
        while(matcher.matches())
        {
            j++;
            matcher = SPLIT_NUMBER_PATTERN.matcher(pattern.substring(0, j));
        }
        if(pattern.substring(j-1, j).equals("."))
        {
            j++;
            matcher = SPLIT_NUMBER_PATTERN.matcher(pattern.substring(0, j));
            while(matcher.matches())
            {
                j++;
                matcher = SPLIT_NUMBER_PATTERN.matcher(pattern.substring(0, j));
            }
        }
        return pattern.substring(0, j-1);
    }

    private String trimBy(StringBuilder s, int left, int right) {
        int end = s.length();
        return s.substring(left, end-right);
    }

    private String trimUrl(StringBuilder s) {
        StringBuilder s1 = new StringBuilder( trimBy(s, 4, 1).trim() );
        if (s1.length() == 0)
        {
            return s1.toString();
        }
        int end = s1.length() - 1;
        char c0 = s1.charAt(0);
        char c1 = s1.charAt(end);
        if ((c0 == '"' && c1 == '"')
            || (c0 == '\'' && c1 == '\''))
        {            return trimBy(s1, 1, 1);
        }

        return s1.toString();
    }
}

<DEFAULT> TOKEN :
{
// s        [ \t\r\n\f]+
// {s}          {return S;}
    < S: ( " "|"\t"|"\r"|"\n"|"\f" )+ >
// w        {s}?
    | < W: ( <S> )? >
}

<DEFAULT> MORE :
{
  < "/*" > : COMMENT
}

<COMMENT> SKIP :
{
  < "*/" > : DEFAULT
}

<COMMENT> MORE :
{
  < ~[] > : COMMENT
}

<DEFAULT> TOKEN :
{
// h        [0-9a-f]
  < #H: ["0"-"9","a"-"f"] >
| < #HNUM: <H> | <H><H> | <H><H><H> | <H><H><H><H> | <H><H><H><H><H> | <H><H><H><H><H><H> >

// nonascii [\200-\377]
// The two occurrences of "\377" represent the highest character number that
// current versions of Flex can deal with (decimal 255). They should be read as
// "\4177777" (decimal 1114111), which is the highest possible code point in
// Unicode/ISO-10646.
// Limitation: This parser can only handle Unicode characters up to \uFFFF
// (decimal 65535).
| < #NONASCII: ["\u0080"-"\uFFFF"] >

// unicode      \\{h}{1,6}(\r\n|[ \t\r\n\f])?
| < #UNICODE: "\\" <HNUM> ( "\r\n" | [" ","\t","\r","\n","\f"] )? >

// escape       {unicode}|\\[^\r\n\f0-9a-f]
| < #ESCAPE: <UNICODE> | ( "\\" ~["\r","\n","\f","0"-"9","a"-"f"] ) >

// nmstart      [_a-z]|{nonascii}|{escape}
| < #NMSTART: ["_","a"-"z"] | <NONASCII> | <ESCAPE> >

// nmchar       [_a-z0-9-]|{nonascii}|{escape}
| < #NMCHAR: ["_","a"-"z","0"-"9","-"] | <NONASCII> | <ESCAPE> >

// nl       \n|\r\n|\r|\f
| < #NL: "\n" | "\r\n" | "\r" | "\f" >

// string1      \"([^\n\r\f\\"]|\\{nl}|{escape})*\"
| < #STRING1: ( ~["\n","\r","\f","\\","\""] | "\\" <NL> | <ESCAPE> )* >

// string2      \'([^\n\r\f\\']|\\{nl}|{escape})*\'
| < #STRING2: ( ~["\n","\r","\f","\\","\'"] | "\\" <NL> | <ESCAPE> )* >

// comment      \/\*[^*]*\*+([^/*][^*]*\*+)*\/
| < #COMMENT_: "/" "*" ( ~["*"] )* ("*")+ ( ~["/","*"] ( ~["*"] )* ( "*" )+ )* "/">

// {num}            {return NUMBER;}
| < NUMBER: <NUM> >

| < INHERIT: "inherit" >

// ident        -?{nmstart}{nmchar}*
// {ident}         {return IDENT;}
| < IDENT: ("-")? <NMSTART> ( <NMCHAR> )* >

// name     {nmchar}+
| < #NAME: ( <NMCHAR> )+ >

// num      [0-9]+|[0-9]*"."[0-9]+
| < NUM: ( ["0"-"9"] )+ | ( ["0"-"9"] )* "." ( ["0"-"9"] )+ >

// string       {string1}|{string2}
// {string}        {return STRING;}
| < STRING: ( "\"" <STRING1> "\"" ) | ( "\'" <STRING2> "\'" ) > { matchedToken.image = trimBy(image, 1, 1); }

// url      ([!#$%&*-~]|{nonascii}|{escape})*
| < #URL: ( ["!","#","$","%","&","*"-"[","]"-"~"] | <NONASCII> | <ESCAPE> )* >

// A        a|\\0{0,4}(41|61)(\r\n|[ \t\r\n\f])?
| < #A_LETTER: "a" | "\\" ( "0" | "00" | "000" | "0000" ) ( "41" | "61" ) ( "\r\n" | [ " ", "\t", "\r", "\n", "\f"])? >

// C        c|\\0{0,4}(43|63)(\r\n|[ \t\r\n\f])?
| < #C_LETTER: "c" | "\\" ( "0" | "00" | "000" | "0000" ) ( "43" | "63" ) ( "\r\n" | [ " ", "\t", "\r", "\n", "\f"])? >

// D        d|\\0{0,4}(44|64)(\r\n|[ \t\r\n\f])?
| < #D_LETTER: "d" | "\\" ( "0" | "00" | "000" | "0000" ) ( "44" | "64" ) ( "\r\n" | [ " ", "\t", "\r", "\n", "\f"])? >

// E        e|\\0{0,4}(45|65)(\r\n|[ \t\r\n\f])?
| < #E_LETTER: "e" | "\\" ( "0" | "00" | "000" | "0000" ) ( "45" | "65" ) ( "\r\n" | [ " ", "\t", "\r", "\n", "\f"])? >

// G        g|\\0{0,4}(47|67)(\r\n|[ \t\r\n\f])?|\\g
| < #G_LETTER: "g" | "\\" ( "0" | "00" | "000" | "0000" ) ( "47" | "67" ) ( "\r\n" | [ " ", "\t", "\r", "\n", "\f"])? | "\\" "g" >

// H        h|\\0{0,4}(48|68)(\r\n|[ \t\r\n\f])?|\\h
| < #H_LETTER: "h" | "\\" ( "0" | "00" | "000" | "0000" ) ( "48" | "68" ) ( "\r\n" | [ " ", "\t", "\r", "\n", "\f"])? | "\\" "h" >

// I        i|\\0{0,4}(49|69)(\r\n|[ \t\r\n\f])?|\\i
| < #I_LETTER: "i" | "\\" ( "0" | "00" | "000" | "0000" ) ( "49" | "69" ) ( "\r\n" | [ " ", "\t", "\r", "\n", "\f"])? | "\\" "i" >

// K        k|\\0{0,4}(4b|6b)(\r\n|[ \t\r\n\f])?|\\k
| < #K_LETTER: "k" | "\\" ( "0" | "00" | "000" | "0000" ) ( "4b" | "6b" ) ( "\r\n" | [ " ", "\t", "\r", "\n", "\f"])? | "\\" "k" >

// M        m|\\0{0,4}(4d|6d)(\r\n|[ \t\r\n\f])?|\\m
| < #M_LETTER: "m" | "\\" ( "0" | "00" | "000" | "0000" ) ( "4d" | "6d" ) ( "\r\n" | [ " ", "\t", "\r", "\n", "\f"])? | "\\" "m" >

// N        n|\\0{0,4}(4e|6e)(\r\n|[ \t\r\n\f])?|\\n
| < #N_LETTER: "n" | "\\" ( "0" | "00" | "000" | "0000" ) ( "4e" | "6e" ) ( "\r\n" | [ " ", "\t", "\r", "\n", "\f"])? | "\\" "n" >

// O        o|\\0{0,4}(51|71)(\r\n|[ \t\r\n\f])?|\\o
| < #O_LETTER: "o" | "\\" ( "0" | "00" | "000" | "0000" ) ( "51" | "71" ) ( "\r\n" | [ " ", "\t", "\r", "\n", "\f"])? | "\\" "o" >

// P        p|\\0{0,4}(50|70)(\r\n|[ \t\r\n\f])?|\\p
| < #P_LETTER: "p" | "\\" ( "0" | "00" | "000" | "0000" ) ( "50" | "70" ) ( "\r\n" | [ " ", "\t", "\r", "\n", "\f"])? | "\\" "p" >

// R        r|\\0{0,4}(52|72)(\r\n|[ \t\r\n\f])?|\\r
| < #R_LETTER: "r" | "\\" ( "0" | "00" | "000" | "0000" ) ( "52" | "72" ) ( "\r\n" | [ " ", "\t", "\r", "\n", "\f"])? | "\\" "r" >

// S        s|\\0{0,4}(53|73)(\r\n|[ \t\r\n\f])?|\\s
| < #S_LETTER: "s" | "\\" ( "0" | "00" | "000" | "0000" ) ( "53" | "73" ) ( "\r\n" | [ " ", "\t", "\r", "\n", "\f"])? | "\\" "s" >

// T        t|\\0{0,4}(54|74)(\r\n|[ \t\r\n\f])?|\\t
| < #T_LETTER: "t" | "\\" ( "0" | "00" | "000" | "0000" ) ( "54" | "74" ) ( "\r\n" | [ " ", "\t", "\r", "\n", "\f"])? | "\\" "t" >

// X        x|\\0{0,4}(58|78)(\r\n|[ \t\r\n\f])?|\\x
| < #X_LETTER: "x" | "\\" ( "0" | "00" | "000" | "0000" ) ( "58" | "78" ) ( "\r\n" | [ " ", "\t", "\r", "\n", "\f"])? | "\\" "x" >

// Z        z|\\0{0,4}(5a|7a)(\r\n|[ \t\r\n\f])?|\\z
| < #Z_LETTER: "z" | "\\" ( "0" | "00" | "000" | "0000" ) ( "5a" | "7a" ) ( "\r\n" | [ " ", "\t", "\r", "\n", "\f"])? | "\\" "z" >

// "<!--"       {return CDO;}
| < CDO: "<!--" >

// "-->"            {return CDC;}
| < CDC: "-->" >

// "~="         {return INCLUDES;}
| < INCLUDES: "~=" >

// "|="         {return DASHMATCH;}
| < DASHMATCH: "|=" >

// {w}"{"           {return LBRACE;}
| < LBRACE: <W> "{" >

// {w}"+"           {return PLUS;}
| < PLUS: <W> "+" >

// {w}">"           {return GREATER;}
| < GREATER: <W> ">" >

// {w}","           {return COMMA;}
| < COMMA: <W> "," >

// "#"{name}        {return HASH;}
| < HASH: "#" <NAME> >

// @{I}{M}{P}{O}{R}{T}  {return IMPORT_SYM;}
| < IMPORT_SYM: "@" <I_LETTER> <M_LETTER> <P_LETTER> <O_LETTER> <R_LETTER> <T_LETTER>>

// @{P}{A}{G}{E}        {return PAGE_SYM;}
| < PAGE_SYM: "@" <P_LETTER> <A_LETTER> <G_LETTER> <E_LETTER> >

// @{M}{E}{D}{I}{A} {return MEDIA_SYM;}
| < MEDIA_SYM: "@" <M_LETTER> <E_LETTER> <D_LETTER> <I_LETTER> <A_LETTER> >

// @{C}{H}{A}{R}{S}{E}{T}   {return CHARSET_SYM;}
| < CHARSET_SYM: "@" <C_LETTER> <H_LETTER> <A_LETTER> <R_LETTER> <S_LETTER> <E_LETTER> <T_LETTER> >

// "!"({w}|{comment})*{I}{M}{P}{O}{R}{T}{A}{N}{T}   {return IMPORTANT_SYM;}
| < IMPORTANT_SYM: "!" ( <W> | <COMMENT_> )* <I_LETTER> <M_LETTER> <P_LETTER> <O_LETTER> <R_LETTER> <T_LETTER> <A_LETTER> <N_LETTER> <T_LETTER> >

// {num}{E}{M}      {return EMS;}
| < EMS: <NUM> <E_LETTER> <M_LETTER> > { matchedToken.image = splitNumber(image); }

// {num}{E}{X}      {return EXS;}
| < EXS: <NUM> <E_LETTER> <X_LETTER> > { matchedToken.image = splitNumber(image); }

// {num}{P}{X}      {return LENGTH;}
| < LENGTH_PX: <NUM> <P_LETTER> <X_LETTER> > { matchedToken.image = splitNumber(image); }

// {num}{C}{M}      {return LENGTH;}
| < LENGTH_CM: <NUM> <C_LETTER> <M_LETTER> > { matchedToken.image = splitNumber(image); }

// {num}{M}{M}      {return LENGTH;}
| < LENGTH_MM: <NUM> <M_LETTER> <M_LETTER> > { matchedToken.image = splitNumber(image); }

// {num}{I}{N}      {return LENGTH;}
| < LENGTH_IN: <NUM> <I_LETTER> <N_LETTER> > { matchedToken.image = splitNumber(image); }

// {num}{P}{T}      {return LENGTH;}
| < LENGTH_PT: <NUM> <P_LETTER> <T_LETTER> > { matchedToken.image = splitNumber(image); }

// {num}{P}{C}      {return LENGTH;}
| < LENGTH_PC: <NUM> <P_LETTER> <C_LETTER> > { matchedToken.image = splitNumber(image); }

// {num}{D}{E}{G}       {return ANGLE;}
| < ANGLE_DEG: <NUM> <D_LETTER> <E_LETTER> <G_LETTER> > { matchedToken.image = splitNumber(image); }

// {num}{R}{A}{D}       {return ANGLE;}
| < ANGLE_RAD: <NUM> <R_LETTER> <A_LETTER> <D_LETTER> > { matchedToken.image = splitNumber(image); }

// {num}{G}{R}{A}{D}    {return ANGLE;}
| < ANGLE_GRAD: <NUM> <G_LETTER> <R_LETTER> <A_LETTER> <D_LETTER> > { matchedToken.image = splitNumber(image); }

// {num}{M}{S}      {return TIME;}
| < TIME_MS: <NUM> <M_LETTER> <S_LETTER> > { matchedToken.image = splitNumber(image); }

// {num}{S}     {return TIME;}
| < TIME_S: <NUM> <S_LETTER> > { matchedToken.image = splitNumber(image); }

// {num}{H}{Z}      {return FREQ;}
| < FREQ_HZ: <NUM> <H_LETTER> <Z_LETTER> > { matchedToken.image = splitNumber(image); }

// {num}{K}{H}{Z}       {return FREQ;}
| < FREQ_KHZ: <NUM> <K_LETTER> <H_LETTER> <Z_LETTER> > { matchedToken.image = splitNumber(image); }

// {num}{ident}     {return DIMENSION;}
| < DIMENSION: <NUM> <IDENT> >

// {num}%           {return PERCENTAGE;}
| < PERCENTAGE: <NUM> "%" > { matchedToken.image = splitNumber(image); }

// "url("{w}{string}{w}")"  {return URI;}
// "url("{w}{url}{w}")" {return URI;}
| < URI: "url(" ( <S> )* ( <STRING> | <URL> ) ( <S> )* ")" > { matchedToken.image = trimUrl(image); }

// {ident}"(        {return FUNCTION;}
| < FUNCTION: <IDENT> "(" >

| < RBRACE: "}" >
| < DOT: "." >
| < SEMICOLON: ";" >
| < COLON: ":" >
| < ASTERISK: "*" >
| < SLASH: "/" >
| < MINUS: "-" >
| < EQUALS: "=" >
| < LSQUARE: "[" >
| < RSQUARE: "]" >
| < RROUND: ")" >
| < ATKEYWORD: "@" <IDENT> >
}

<*> TOKEN:
{
    < UNKNOWN: ~[] >
    {
        if (!_quiet) {
            System.err.println("Illegal character : " + image.toString());
        }
    }
}

//
// stylesheet
//  : [ CHARSET_SYM STRING ';' ]?
//    [S|CDO|CDC]* [ import [S|CDO|CDC]* ]*
//    [ [ ruleset | media | page ] [S|CDO|CDC]* ]*
//  ;
//
void styleSheet() :
{
}
{
    try
    {
        { this.handleStartDocument(); }
        styleSheetRuleList()
        <EOF>
    }
    finally
    {
        this.handleEndDocument();
    }
}

void styleSheetRuleList() :
{
  boolean ruleFound = false;
}
{
    ( charsetRule() )?
    ( <S> | <CDO> | <CDC> )*
    (
        (            importRule(ruleFound)
	        | 
	        (
	            styleRule() | mediaRule() | pageRule() | unknownRule()
	        )
            {
                ruleFound = true;
            }
	    )
        ( <S> | <CDO> | <CDC> )*
    )*
}

//
// This is used by ASTStyleSheet.insertRule to parse a single rule
//
void styleSheetRuleSingle() :
{
}
{
    ( <S> )*
    ( charsetRule() | importRule(false) | styleRule() | mediaRule() | pageRule() | unknownRule() )
    ( <S> )*
}

void charsetRule() :
{
  Token t;
  Locator locator;
}
{
    try
    {
        <CHARSET_SYM>
        {
            locator = this.getLocator();
        }
        <S>
        t = <STRING>
        <SEMICOLON>
        {
            this.handleCharset(t.toString(), locator);
        }
    }
    catch (ParseException e)
    {
        this.getErrorHandler().error(
            this.toCSSParseException("invalidCharsetRule", e));
    }
}

void unknownRule() :
{
    Token t;
    String s;
    Locator locator;
}
{
    try
    {
        t = <ATKEYWORD>
        {
            locator = this.getLocator();
            s = skip();
            this.handleIgnorableAtRule(s, locator);
        }
    }
    catch (ParseException e)
    {
        this.getErrorHandler().error(
            this.toCSSParseException("invalidUnknownRule", e));
    }
}

//
// import
//  : IMPORT_SYM S*
//    [STRING|URI] S* [ medium [ COMMA S* medium]* ]? ';' S*
//  ;
//
void importRule(final boolean nonImportRuleFoundBefore) :
{
    Token t;
    SACMediaListImpl ml = new SACMediaListImpl();
    Locator locator;
}
{
    try
    {
        {
            ParseException e = null;
            if (nonImportRuleFoundBefore)
            {
                e = generateParseException();
            }
        }
        <IMPORT_SYM>
        {
            locator = this.getLocator();
        }
        ( <S> )*
        ( t = <STRING> | t = <URI> ) ( <S> )*
        ( mediaList(ml) )?
        <SEMICOLON>
        {
            if (nonImportRuleFoundBefore)            {                getErrorHandler().error(toCSSParseException("invalidImportRuleIgnored2", e));
            }
            else            {                handleImportStyle(unescape(t.image, false), ml, null, locator);
            }
        }
    }
    catch (CSSParseException e)
    {
        this.getErrorHandler().error(e);
        this.error_skipAtRule();
    }
    catch (ParseException e)
    {
        this.getErrorHandler().error(this.toCSSParseException("invalidImportRule", e));
        this.error_skipAtRule();
    }
}

//
// media
//  : MEDIA_SYM S* medium [ COMMA S* medium ]* LBRACE S* ruleset* '}' S*
//  ;
//
void mediaRule() :
{
    boolean start = false;
    SACMediaListImpl ml = new SACMediaListImpl();
    Locator locator;
}
{
    try
    {
        <MEDIA_SYM>
        {
            locator = this.getLocator();
        }
        ( <S> )*
        mediaList(ml)
        {
            start = true;
            this.handleStartMedia(ml, locator);
        }
        <LBRACE> ( <S> )*
        ( mediaRuleList() )?
        <RBRACE>
    }
    catch (CSSParseException e)
    {
        this.getErrorHandler().error(e);
        this.error_skipblock();
    }
    catch(ParseException e)
    {
        CSSParseException cpe = this.toCSSParseException("invalidMediaRule", e);
        this.getErrorHandler().error(cpe);
        this.getErrorHandler().warning(this.createSkipWarning("ignoringRule", cpe));
        this.error_skipblock();
    }
    finally
    {
        if (start) {
            this.handleEndMedia(ml);
        }
    }
}

void mediaList(SACMediaListImpl ml) :
{
    String s;
}
{
    try
    {
        s = medium()
        {
            ml.setLocator(this.getLocator());
        }
        ( <COMMA> ( <S> )* { ml.add(s); } s = medium() )*
        { ml.add(s); }
    }
    catch(ParseException e)
    {
        throw this.toCSSParseException("invalidMediaList", e);
    }
}

void mediaRuleList() :
{
}
{
  ( ( styleRule() | pageRule() | unknownRule() | importRule(true) ) ( <S> )* )+
}

void mediaRuleSingle() :
{
}
{
  ( styleRule() | pageRule() | unknownRule() )
}

//
// medium
//   : IDENT S*
//   ;
//
String medium() :
{
  Token t;
}
{
    t = <IDENT> ( <S> )*
    {
        this.handleMedium(t.image, this.createLocator(t));
        return t.image;
    }
}

//
// page
//  : PAGE_SYM S* pseudo_page? S*
//    LBRACE S* declaration [ ';' S* declaration ]* '}' S*
//  ;
//
void pageRule() :
{
    Token t = null;
    String s = null;
    boolean start = false;
    Locator locator;
}
{
    try {
        <PAGE_SYM>
        {
            locator = this.getLocator();
        }
        ( <S> )*

        ( ( s = pseudoPage() ( <S> )* ) )?

        <LBRACE> ( <S> )*
        {
            start = true;
            this.handleStartPage((t != null) ? unescape(t.image, false) : null, s, locator);
        }

        ( declaration() )?
        ( <SEMICOLON> ( <S> )* ( declaration() )? )*
        <RBRACE>
    }
    catch (CSSParseException e)
    {
        this.getErrorHandler().error(e);
        this.error_skipblock();
    }
    catch(ParseException e)
    {
        CSSParseException cpe = this.toCSSParseException("invalidPageRule", e);
        this.getErrorHandler().error(cpe);
        this.getErrorHandler().warning(this.createSkipWarning("ignoringRule", cpe));
        this.error_skipblock();
    }
    finally {
        if (start) {
            this.handleEndPage((t != null) ? unescape(t.image, false) : null, s);
        }
    }
}

//
// pseudoPage
//   : ':' IDENT
//   ;
//
String pseudoPage() :
{
  Token t;
}
{
  <COLON> t = <IDENT> { return t.image; }
}

//
// operator
//  : '/' S* | COMMA S* | /* empty */
//  ;
//
LexicalUnit operator(LexicalUnit prev) :
{
  Token t;
}
{
  t = <SLASH> ( <S> )*   { return new LexicalUnitImpl(prev, LexicalUnit.SAC_OPERATOR_SLASH); }
  | t = <COMMA> ( <S> )* { return new LexicalUnitImpl(prev, LexicalUnit.SAC_OPERATOR_COMMA); }
}

//
// combinator
//  : PLUS S*
//  | GREATER S*
//  | S
//  ;
//
char combinator() :
{
  char c = ' ';
}
{
  ( <PLUS> { c='+'; } ( <S> )*
  | <GREATER> { c='>'; } ( <S> )*
  | <S> ( ( <PLUS> { c='+'; } | <GREATER> { c='>'; } ) ( <S> )* )? )

  { return c; }
}

//
// unary_operator
//  : '-' | PLUS
//  ;
//
char unaryOperator() :
{
}
{
  ( <MINUS> { return '-'; } | <PLUS> { return '+'; } )
}

//
// property
//   : IDENT S*
//   ;
//
String property() :
{
    Token t;
}
{
    t = <IDENT> ( <S> )*
    { return unescape(t.image, false); }
}

//
// ruleset
//  : selector [ COMMA S* selector ]*
//    LBRACE S* declaration [ ';' S* declaration ]* '}' S*
//  ;
//
void styleRule() :
{
    SelectorList selList = null;
    boolean start = false;
    Token t;
}
{
    try {
        {
            t = this.getToken();
        }
        selList = selectorList()
        <LBRACE> ( <S> )*
        {
            start = true;
            this.handleStartSelector(selList, this.createLocator(t.next));
        }
        styleDeclaration()
        (           <RBRACE> | <EOF>
        )
    }
    catch(CSSParseException e)
    {
        this.getErrorHandler().error(e);
        this.getErrorHandler().warning(this.createSkipWarning("ignoringRule", e));
        this.error_skipblock();
    }
    catch(ParseException e)
    {
        CSSParseException cpe = this.toCSSParseException("invalidStyleRule", e);
        this.getErrorHandler().error(cpe);
        this.getErrorHandler().warning(this.createSkipWarning("ignoringFollowingDeclarations", cpe));
        this.error_skipblock();
    }
    finally {
        if (start) {
            this.handleEndSelector(selList);
        }
    }
}

SelectorList parseSelectorsInternal() :
{
    SelectorList selectors;
}
{
    selectors = selectorList()
    <EOF>
    {
        return selectors;
    }
}

SelectorList selectorList() :
{
    SelectorListImpl selList = new SelectorListImpl();
    Selector sel;
}
{
    sel = selector()
    {
        if (sel instanceof Locatable)
        {
            selList.setLocator(((Locatable) sel).getLocator());
        }
    }
    ( <COMMA> ( <S> )* { selList.add(sel); } sel = selector() )*
    {
        selList.add(sel);
        return selList;
    }
}

//
// selector
//   : simple_selector [ combinator simple_selector ]*
//   ;
//
Selector selector() :
{
    Selector sel;
    char comb;
}
{
    try {
        sel = simpleSelector(null, ' ')
        ( LOOKAHEAD(2) comb = combinator() sel = simpleSelector(sel, comb) )* ( <S> )*
        {
            return sel;
        }
    } catch (ParseException e) {
        throw this.toCSSParseException("invalidSelector", e);
        //skipSelector();
    }
}

//
// simple_selector
//  : element_name [ HASH | class | attrib | pseudo ]*
//  | [ HASH | class | attrib | pseudo ]+
//  ;
//
Selector simpleSelector(Selector sel, char comb) :
{
    SimpleSelector simpleSel = null;
    Condition c = null;
    SimpleSelector pseudoElementSel = null;
    Object o = null;
}
{
    try
    {
        (
            ( simpleSel = elementName()
                ( c = hash(c)
                | c = _class(c)
                | c = attrib(c)
                | o = pseudo(c)
                )*
            )
            |
            ( { simpleSel = this.getSelectorFactory().createElementSelector(null, null); }
                ( c = hash(c)
                | c = _class(c)
                | c = attrib(c)
                | o = pseudo(c)
                )+
            )
        )

        {
            if (o instanceof SimpleSelector)
            {
                pseudoElementSel = (SimpleSelector) o;
            }
            else if (o instanceof Condition)
            {
                c = (Condition) o;
            }
            if (c != null) {
                simpleSel = this.getSelectorFactory().createConditionalSelector(simpleSel, c);
            }

            if (sel != null) {
                switch (comb) {
                case ' ':
                    sel = this.getSelectorFactory().createDescendantSelector(sel, simpleSel);
                    break;
                case '+':
                    sel = this.getSelectorFactory().createDirectAdjacentSelector(sel.getSelectorType(), sel, simpleSel);
                    break;
                case '>':
                    sel = this.getSelectorFactory().createChildSelector(sel, simpleSel);
                    break;
                }
            } else {
                sel = simpleSel;
            }
            if (pseudoElementSel != null)
            {
                sel = this.getSelectorFactory().createDescendantSelector(sel, pseudoElementSel);
            }

            return sel;
        }
    }
    catch (ParseException e)
    {
        throw this.toCSSParseException("invalidSimpleSelector", e);
    }
}

//
// class
//   : '.' IDENT
//   ;
//
Condition _class(Condition pred) :
{
    Token t;
    Locator locator;
}
{
    try
    {
        <DOT>
        {
            locator = this.getLocator();
        }
        t = <IDENT>
        {
            Condition c = this.getConditionFactory().createClassCondition(null, t.image);
            if (c instanceof Locatable)
            {
                ((Locatable) c).setLocator(locator);
            }
            return (pred == null) ? c : this.getConditionFactory().createAndCondition(pred, c);
        }
    }
    catch (ParseException e)
    {
        throw this.toCSSParseException("invalidClassSelector", e);
    }
}

//
// element_name
//   : IDENT | '*'
//   ;
//
SimpleSelector elementName() :
{
    Token t;
    SimpleSelector sel;
}
{
    try
    {
        t=<IDENT>
        {
            sel = this.getSelectorFactory().createElementSelector(null, unescape(t.image, false));
            if (sel instanceof Locatable)
            {
                ((Locatable) sel).setLocator(this.getLocator());
            }
            return sel;
        }
        | <ASTERISK>
        {
            sel = this.getSelectorFactory().createElementSelector(null, null);
            if (sel instanceof Locatable)
            {
                ((Locatable) sel).setLocator(this.getLocator());
            }
            return sel;
        }
    }
    catch (ParseException e)
    {
        throw this.toCSSParseException("invalidElementName", e);
    }
}

//
// attrib
//   : '[' S* IDENT S* [ [ '=' | INCLUDES | DASHMATCH ] S*
//     [ IDENT | STRING ] S* ]? ']'
//   ;
//
Condition attrib(Condition pred) :
{
    Token t;
    String name = null;
    String value = null;
    int type = 0;
    Locator locator;
}
{
    try
    {
        <LSQUARE>
        {
            locator = this.getLocator();
        }
        ( <S> )*
        t = <IDENT> { name = unescape(t.image, false); } ( <S> )*
        (
            (
                <EQUALS> { type = 1; }
                |
                <INCLUDES> { type = 2; }
                |
                <DASHMATCH> { type = 3; }
            )
            ( <S> )*
            (
                t = <IDENT> { value = t.image; }
                |
                t = <STRING> { value = unescape(t.image, false); }
            )
            ( <S> )*
        )?
        <RSQUARE>
        {
            Condition c = null;
            switch (type) {
            case 0:
                c = this.getConditionFactory().createAttributeCondition(name, null, false, null);
                break;
            case 1:
                c = this.getConditionFactory().createAttributeCondition(name, null, false, value);
                break;
            case 2:
                c = this.getConditionFactory().createOneOfAttributeCondition(name, null, false, value);
                break;
            case 3:
                c = this.getConditionFactory().createBeginHyphenAttributeCondition(name, null, false, value);
                break;
            }
            if (c instanceof Locatable)
            {
                ((Locatable) c).setLocator(locator);
            }
            return (pred == null) ? c : this.getConditionFactory().createAndCondition(pred, c);
        }
    }
    catch (ParseException e)
    {
        throw this.toCSSParseException("invalidAttrib", e);
    }
}

//
// pseudo
//  : ':' [ IDENT | FUNCTION S* IDENT? S* ')' ]
//  ;
//
Object pseudo(Condition pred) :
{
    SimpleSelector pseudoElementSel = null;
    Condition c = null;
    Token t;
    String function;
    String arg = "";
    Locator locator;
}
{
    try
    {
        <COLON>
        {
            locator = this.getLocator();
        }
        (
            t = <IDENT>
            {
                String s = t.image;
                if ("first-line".equals(s)
                    || "first-letter".equals(s)
                    || "before".equals(s)
                    || "after".equals(s))
                {
                    pseudoElementSel = this.getSelectorFactory().createPseudoElementSelector(null, s);
                }
                else
                {
                    c = this.getConditionFactory().createPseudoClassCondition(null, s);
                }
                if (pseudoElementSel != null)
                {
                    if (pseudoElementSel instanceof Locatable)
                    {
                        ((Locatable) pseudoElementSel).setLocator(locator);
                    }
                    return pseudoElementSel;
                }
                if (c instanceof Locatable)
                {
                    ((Locatable) c).setLocator(locator);
                }
                return (pred == null)
                    ? c
                    : this.getConditionFactory().createAndCondition(pred, c);
            }
            |
            (
                t = <FUNCTION> { function = unescape(t.image, false); } ( <S> )*
                (t = <IDENT> { arg = unescape(t.image, false); } ( <S> )* )?
                <RROUND>
                {
                    if (function.equalsIgnoreCase("lang(")) {
                        c = this.getConditionFactory().createLangCondition(unescape(arg, false));
                        if (c instanceof Locatable)
                        {
                            ((Locatable) c).setLocator(locator);
                        }
                        return (pred == null)
                            ? c
                            : this.getConditionFactory().createAndCondition(pred, c);
                    } else {
                        c = this.getConditionFactory().createPseudoClassCondition(null, function + arg + ")");
                        if (c instanceof Locatable)
                        {
                            ((Locatable) c).setLocator(locator);
                        }
                        return (pred == null)
                            ? c
                            : this.getConditionFactory().createAndCondition(pred, c);
                    }
                }
            )

        )
    }
    catch (ParseException e)
    {
        throw this.toCSSParseException("invalidPseudo", e);
    }
}

Condition hash(Condition pred) :
{
    Token t;
}
{
    try
    {
        t = <HASH>
        {
            Condition c = this.getConditionFactory().createIdCondition(t.image.substring(1));
            if (c instanceof Locatable)
            {
                ((Locatable) c).setLocator(this.getLocator());
            }
            return (pred == null) ? c : this.getConditionFactory().createAndCondition(pred, c);
        }
    }
    catch (ParseException e)
    {
        throw this.toCSSParseException("invalidHash", e);
    }
}

void styleDeclaration()  :
{
}
{
    try
    {
        ( declaration() )?
        ( <SEMICOLON> ( <S> )* ( declaration() )? )*
    }
    catch (ParseException ex)
    {
        this.getErrorHandler().error(this.toCSSParseException("invalidDeclaration", ex));
        error_skipdecl();
    }
}

//
// declaration
//   : property ':' S* expr prio?
//   |
//   ;
//
void declaration() :
{
  String p;
  LexicalUnit e;
  boolean priority = false;
  Locator locator = null;
}
{
    try
    {
        p = property()
        {
            locator = this.getLocator();
        }
        <COLON> ( <S> )*
        e = expr()
        ( priority = prio() )?
        {
            this.handleProperty(p, e, priority, locator);
        }
    }
    catch (CSSParseException ex)
    {
        this.getErrorHandler().error(ex);
        error_skipdecl();
    }
    catch (ParseException ex)
    {
        this.getErrorHandler().error(this.toCSSParseException("invalidDeclaration", ex));
        error_skipdecl();
    }
}

//
// prio
//   : IMPORTANT_SYM S*
//   ;
boolean prio() :
{
}
{
  <IMPORTANT_SYM> ( <S> )*
  { return true; }
}

//
// expr
//   : term [ operator term ]*
//   ;
//
// TODO: Deal with the operator
//
LexicalUnit expr() :
{
    LexicalUnit head;
    LexicalUnit body;
}
{
    try
    {
        head = term(null) { body = head; }
        ( ( body = operator(body) )? body = term(body) )*
        { return head; }
    }
    catch (ParseException ex)
    {
        throw this.toCSSParseException("invalidExpr", ex);
    }
}

//
// term
//  : unary_operator?
//    [ NUMBER S* | PERCENTAGE S* | LENGTH S* | EMS S* | EXS S* | ANGLE S* |
//      TIME S* | FREQ S* ]
//  | STRING S* | IDENT S* | URI S* | hexcolor | function
//  ;
//
LexicalUnit term(LexicalUnit prev) :
{
  Token t;
  char op = ' ';
  String s;
  LexicalUnit value = null;
  Locator locator = null;
}
{
    ( op = unaryOperator() )?
    {
        if (op != ' ')
        {
            locator = this.getLocator();
        }
    }
    (
        ( t = <NUMBER>
        {
            try
            {
                value = LexicalUnitImpl.createNumber(prev, intValue(op, t.image));
            }
            catch (NumberFormatException e)
            {
                value = LexicalUnitImpl.createNumber(prev, floatValue(op, t.image));
            }
        }
        | t = <PERCENTAGE>  { value = LexicalUnitImpl.createPercentage(prev, floatValue(op, t.image)); }
        | t = <LENGTH_PX>   { value = LexicalUnitImpl.createPixel(prev, floatValue(op, t.image)); }
        | t = <LENGTH_CM>   { value = LexicalUnitImpl.createCentimeter(prev, floatValue(op, t.image)); }
        | t = <LENGTH_MM>   { value = LexicalUnitImpl.createMillimeter(prev, floatValue(op, t.image)); }
        | t = <LENGTH_IN>   { value = LexicalUnitImpl.createInch(prev, floatValue(op, t.image)); }
        | t = <LENGTH_PT>   { value = LexicalUnitImpl.createPoint(prev, floatValue(op, t.image)); }
        | t = <LENGTH_PC>   { value = LexicalUnitImpl.createPica(prev, floatValue(op, t.image)); }
        | t = <EMS>         { value = LexicalUnitImpl.createEm(prev, floatValue(op, t.image)); }
        | t = <EXS>         { value = LexicalUnitImpl.createEx(prev, floatValue(op, t.image)); }
        | t = <ANGLE_DEG>   { value = LexicalUnitImpl.createDegree(prev, floatValue(op, t.image)); }
        | t = <ANGLE_RAD>   { value = LexicalUnitImpl.createRadian(prev, floatValue(op, t.image)); }
        | t = <ANGLE_GRAD>  { value = LexicalUnitImpl.createGradian(prev, floatValue(op, t.image)); }
        | t = <TIME_MS>     { value = LexicalUnitImpl.createMillisecond(prev, floatValue(op, t.image)); }
        | t = <TIME_S>      { value = LexicalUnitImpl.createSecond(prev, floatValue(op, t.image)); }
        | t = <FREQ_HZ>     { value = LexicalUnitImpl.createHertz(prev, floatValue(op, t.image)); }
        | t = <FREQ_KHZ>    { value = LexicalUnitImpl.createKiloHertz(prev, floatValue(op, t.image)); }
        | value = function(prev)
        )
    | t = <STRING>          { value = new LexicalUnitImpl(prev, LexicalUnit.SAC_STRING_VALUE, unescape(t.image, false)); }
    | t = <IDENT>           { value = new LexicalUnitImpl(prev, LexicalUnit.SAC_IDENT, t.image); }
    | t = <URI>             { value = new LexicalUnitImpl(prev, LexicalUnit.SAC_URI, unescape(t.image, true)); }
    | value = hexcolor(prev)
    | t = <DIMENSION>
    {
        int n = getLastNumPos(t.image);
        value = LexicalUnitImpl.createDimension(
            prev,
            floatValue(op, t.image.substring(0, n+1)),
            t.image.substring(n+1));
    }
    | t = <INHERIT>         { value = new LexicalUnitImpl(prev, LexicalUnit.SAC_INHERIT, t.image); }
    )
    {
        if (locator == null)
        {
            locator = this.getLocator();
        }
    }
    ( <S> )*
    {
        if (value instanceof Locatable)
        {
            ((Locatable) value).setLocator(locator);
        }
        return value;
    }
}

//
// function
//   : FUNCTION S* expr ')' S*
//   ;
//
LexicalUnit function(LexicalUnit prev) :
{
    Token t;
    LexicalUnit params;
}
{
    t = <FUNCTION> ( <S> )*
    params = expr()
    <RROUND>
    {
        return this.functionInternal(prev, t, params);
    }
}

//
// hexcolor
//   : HASH S*
//   ;
//
LexicalUnit hexcolor(LexicalUnit prev) :
{
    Token t;
}
{
    t = <HASH>
    {
        return this.hexcolorInternal(prev, t);
    }
}

JAVACODE
void skipSelector() {
    Token t = getToken(1);
    while (t.kind != COMMA && t.kind != SEMICOLON && t.kind != LBRACE && t.kind != EOF ) {
        getNextToken();
        t = getToken(1);
    }
}

JAVACODE
String skip() {
  StringBuilder sb = new StringBuilder();
  int nesting = 0;
  Token t = getToken(0);
  if (t.image != null) {
    sb.append(t.image);
  }
  do {
    t = getNextToken();
    if (t.kind == EOF)
      break;
    sb.append(t.image);
    if (t.kind == LBRACE)
      nesting++;
    else if (t.kind == RBRACE)
      nesting--;
    else if (t.kind == SEMICOLON && nesting <= 0)
      break;
  }
  while ((t.kind != RBRACE) || (nesting > 0));

  return sb.toString();
}

JAVACODE
void error_skipblock()
{
    Token t;
    int nesting = 0;
    do
    {
        t = getNextToken();
        if (t.kind == LBRACE)
        {
            nesting++;
        }
        else if (t.kind == RBRACE)
        {
            nesting--;
        }
        else if (t.kind == EOF)
        {
            break;
        }
    }
    while ((t.kind != RBRACE) || (nesting > 0));
}

JAVACODE
void error_skipdecl()
{
    int nesting = 0;
    Token t = getToken(1);
    if (t.kind == LBRACE)
    {
        error_skipblock();
    }
    else if (t.kind == RBRACE)
    {
        // next will be RBRACE so we are finished
        return;
    }
    else
    {
        Token oldToken = t;
        while (t.kind != SEMICOLON && t.kind != RBRACE && t.kind != EOF )
        {
            oldToken = t;
            t = getNextToken();
        }
        if (t.kind == RBRACE)
        {
            token = oldToken;
        }
    }
}

JAVACODE
void error_skipAtRule()
{
    Token t = null;
    do
    {
        t = getNextToken();
    }
    while (t.kind != SEMICOLON && t.kind != EOF);
}